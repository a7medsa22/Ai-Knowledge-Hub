generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String?
  role      UserRole @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  docs      Doc[]
  notes     Note[]
  tasks     Task[]

  @@map("users")
}

model Doc {
  id        String   @id @default(cuid())
  title     String
  content   String
  summary   String?
  tags      String[]
  isPublic  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  authorId  String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  files     File[]
  notes     Note[]

  @@map("docs")
}

model Note {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  authorId  String
  docId     String?
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  doc       Doc?     @relation(fields: [docId], references: [id], onDelete: Cascade)

  @@map("notes") 
}

model File {
  id           String   @id @default(cuid())
  filename     String
  originalName String
  mimeType     String
  size         Int
  url          String
  createdAt    DateTime @default(now())
  linkedToType String?
  linkedToId   String?
  docId        String?
  doc          Doc?     @relation(fields: [docId], references: [id], onDelete: Cascade)

  @@map("files")
}

model Task {
  id          String     @id @default(cuid())
  title       String
  description String?
  status      TaskStatus @default(TODO)
  priority    Priority   @default(MEDIUM)
  dueDate     DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  ownerId     String
  owner       User       @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  @@map("tasks")
}

enum UserRole {
  USER
  ADMIN
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  DONE
  CANCELLED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}
